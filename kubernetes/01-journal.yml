  # zookeeper:
  #   image: wurstmeister/zookeeper
  #   restart: always

  # kafka:
  #   image: wurstmeister/kafka
  #   ports:
  #     - "5092:9092"
  #   env_file: ./env/kafka.env
  #   environment:
  #     KAFKA_CREATE_TOPICS: swh.journal.objects.content:1:1,
  #       swh.journal.objects.origin:1:1,
  #       swh.journal.objects.origin_visit:1:1,
  #       swh.journal.objects.origin_visit_status:1:1,
  #       swh.journal.objects.skipped_content:1:1,
  #       swh.journal.objects.revision:1:1,
  #       swh.journal.indexed.origin_intrinsic_metadata:1:1
  #   depends_on:
  #     - zookeeper
  #   healthcheck:
  #     test: "[ `JMX_PORT= kafka-topics.sh --list --zookeeper zookeeper:2181 | wc -l` -ge 6 ]"
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: wurstmeister/zookeeper
        imagePullPolicy: Always
        ports:
        - containerPort: 2181
        resources:
          limits:
            memory: "1024m"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  type: ClusterIP
  selector:
    app: zookeeper
  ports:
    - port: 2181
      targetPort: 2181
