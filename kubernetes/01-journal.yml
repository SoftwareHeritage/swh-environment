apiVersion: v1
kind: PersistentVolume
metadata:
  name: zookeeper-data-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: zookeeper-data-pv
  local:
    path: /srv/softwareheritage-kube/dev/zookeeper/data
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            # TODO adapt for your needs
            - key: kubernetes.io/os
              operator: In
              values:
                - linux
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: zookeeper-datalog-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: zookeeper-datalog-pv
  local:
    path: /srv/softwareheritage-kube/dev/zookeeper/datalog
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            # TODO adapt for your needs
            - key: kubernetes.io/os
              operator: In
              values:
                - linux
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: zookeeper-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: zookeeper-data-pv
  resources:
    requests:
      storage: 1Gi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: zookeeper-datalog-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: zookeeper-datalog-pv
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: zookeeper:3.6
          imagePullPolicy: Always
          ports:
            - containerPort: 2181
          resources:
            requests:
              memory: "100Mi"
              cpu: "50m"
            limits:
              memory: "200Mi"
              cpu: "100m"
          volumeMounts:
            - mountPath: "/data"
              name: zookeeper-data-pvc
            - mountPath: "/datalog"
              name: zookeeper-datalog-pvc
      volumes:
        - name: zookeeper-data-pvc
          persistentVolumeClaim:
            claimName: zookeeper-data-pvc
        - name: zookeeper-datalog-pvc
          persistentVolumeClaim:
            claimName: zookeeper-datalog-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  type: ClusterIP
  selector:
    app: zookeeper
  ports:
    - port: 2181
      targetPort: 2181
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka
data:
  KAFKA_ADVERTISED_HOST_NAME: kafka
  KAFKA_ADVERTISED_PORT: "9092"
  KAFKA_PORT: "9092"
  KAFKA_LISTENERS: PLAINTEXT://:9092
  KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  KAFKA_MESSAGE_MAX_BYTES: "104857600"
  KAFKA_LOG_DIRS: /kafka/logs
  KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka -Dcom.sun.management.jmxremote.rmi.port=1099
  JMX_PORT: "1099"
  LOG4J_LOGGER_KAFKA_AUTHORIZER_LOGGER: DEBUG, authorizerAppender
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-pv
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: kafka-pv
  local:
    path: /srv/softwareheritage-kube/dev/kafka
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            # TODO adapt for your needs
            - key: kubernetes.io/os
              operator: In
              values:
                - linux
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: kafka-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: kafka-pv
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  selector:
    app: kafka
  ports:
    - port: 9092
      targetPort: 9092
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: wurstmeister/kafka
          imagePullPolicy: Always
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_CREATE_TOPICS
              value: swh.journal.objects.content:10:1:compact,
                swh.journal.objects.origin:10:1:compact,
                swh.journal.objects.origin_visit:10:1:compact,
                swh.journal.objects.origin_visit_status:10:1:compact,
                swh.journal.objects.skipped_content:10:1:compact,
                swh.journal.objects.revision:10:1:compact,
                swh.journal.indexed.origin_intrinsic_metadata:10:1:compact
          envFrom:
            - configMapRef:
                name: kafka
          resources:
            requests:
              memory: "512Mi"
              cpu: "100m"
            limits:
              memory: "1024Mi"
              cpu: "200m"
          volumeMounts:
            - mountPath: "/kafka"
              name: kafka-pvc
      volumes:
        - name: kafka-pvc
          persistentVolumeClaim:
            claimName: kafka-pvc
