#!/usr/bin/env python3

import glob
import logging
import os
import sys

sys.path.append("/usr/share/dh-python")

from dhpython.pydist import REQUIRES_RE, guess_dependency, sensible_pname
from dhpython.version import Version

log = logging.getLogger(__name__)


def parse_requirements(filename):
    requirements = []
    if not os.path.exists(filename):
        return requirements

    with open(filename) as f:
        for line in f.readlines():
            if "#" in line:
                line = line[: line.index("#")]
            line = line.strip()
            if not line:
                continue
            requirements.append(line)
    return requirements


def dependencies_from_requirements(directory):
    requirements = []
    for filename in glob.glob(os.path.join(directory, "requirements*.txt")):
        requirements.extend(parse_requirements(filename))

    for req in set(requirements):
        dep = guess_dependency("cpython3", req, accept_upstream_versions=True)
        if dep:
            yield dep
        else:
            # fallback to sensible_pname
            req_d = REQUIRES_RE.match(req)
            if not req_d:
                log.info(
                    "please ask dh_python3 author to fix REQUIRES_RE "
                    "or your upstream author to fix requires.txt"
                )
                raise Exception("requirement is not valid: %s" % req)
            req_d = req_d.groupdict()
            name = req_d["name"]
            pname = sensible_pname("cpython3", name)
            if req_d.get("operator") == ">=":
                yield f"{pname} (>= {req_d['version']})"
            else:
                yield pname

            if name == "swh.core" and "db" in req_d["enabled_extras"]:
                yield "python3-swh.core.db.pytestplugin"


def get_all_dependencies(directory):
    dependencies = (
        [
            "debhelper-compat (= 13)",
            "python3-all",
            "python3-setuptools",
            "python3-setuptools-scm",
            "dh-python (>= 3)",
        ]
        + sys.argv[1:]
        + list(dependencies_from_requirements(directory))
    )

    deduped_dependencies = set()
    versions_dict = {}
    for dep in dependencies:
        if " " not in dep:
            deduped_dependencies.add(dep)
            continue
        pkg, constraint = dep.split(" ", 1)
        if not constraint.startswith("(>= "):
            deduped_dependencies.add(dep)
            continue

        version = Version(constraint[4:-1])
        if pkg in versions_dict:
            versions_dict[pkg] = max(versions_dict[pkg], version)
        else:
            versions_dict[pkg] = version

    for pkg, minver in versions_dict.items():
        if minver.micro is not None:
            minver_str = f"{minver.major}.{minver.minor}.{minver.micro}"
        else:
            minver_str = str(minver)
        deduped_dependencies.add(f"{pkg} (>= {minver_str})")

    return sorted(deduped_dependencies)


if __name__ == "__main__":
    for dep in get_all_dependencies("."):
        print(dep)
