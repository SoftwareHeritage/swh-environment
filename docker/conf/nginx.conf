worker_processes  1;

# Show startup logs on stderr; switch to debug to print, well, debug logs when
# running nginx-debug
error_log /dev/stderr info;

events {
  worker_connections 1024;
}

http {
  include            mime.types;
  default_type       application/octet-stream;
  sendfile           on;
  keepalive_timeout  65;
  client_max_body_size 4G;

  # Built-in Docker resolver. Needed to allow on-demand resolution of proxy
  # upstreams.
  resolver           127.0.0.11 valid=30s;

  log_format combined_with_duration '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" $request_time';
  access_log /dev/stdout combined_with_duration;

  server {
    listen             5080 default_server;

    # Add a trailing slash to top level requests (e.g. http://localhost:5080/flower)

    rewrite ^/([^/]+)$ /$1/ permanent;

    # In this pile of proxies, all upstreams are set using a variable. This
    # makes nginx DNS-resolve the name of the upstream when clients request
    # them, rather than on start. This avoids an unstarted container preventing
    # nginx from starting.
    #
    # Variables need to be set as early as possible, as they're statements from
    # the rewrite module and `rewrite [...] break;` will prevent these
    # statements from being executed.
    location /rabbitmq/ {
      set $upstream "http://amqp:15672";

      rewrite  ^  $request_uri;
      rewrite ^/rabbitmq(/.*)$ $1 break;

      proxy_pass $upstream$uri;
    }
    location /scheduler {
      set $upstream "http://swh-scheduler:5008";

      rewrite ^/scheduler/(.*)$ /$1 break;
      proxy_pass $upstream;
    }
    location /storage {
      set $upstream "http://swh-storage:5002";

      rewrite ^/storage/(.*)$ /$1 break;
      proxy_pass $upstream;
    }
    location /indexer-storage {
      set $upstream "http://swh-idx-storage:5007";

      rewrite ^/indexer-storage/(.*)$ /$1 break;

      proxy_pass $upstream;
    }
    location /deposit {
      set $upstream "http://swh-deposit:5006";

      rewrite ^/deposit/(.*)$ /deposit/$1 break;
      proxy_pass $upstream;

      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Host $host:5080;
      proxy_set_header SCRIPT_NAME /deposit;
      proxy_redirect off;
    }
    location /objstorage {
      set $upstream "http://swh-objstorage:5003";

      rewrite ^/objstorage/(.*)$ /$1 break;
      proxy_pass $upstream;
      proxy_read_timeout 3600s;
    }
    location /graphql {
      # need an additional '-f docker-compose.graphql.yml' parameter
      # to docker compose up
      set $upstream "http://swh-graphql:5013";

      rewrite ^/graphql/(.*)$ /$1 break;
      proxy_pass $upstream;
    }
    location /prometheus {
      set $upstream "http://prometheus:9090";
      proxy_pass $upstream;
    }
    location /grafana {
      set $upstream "http://grafana:3000";
      rewrite ^/grafana/(.*)$ /$1 break;
      proxy_pass $upstream;
      proxy_set_header Host $http_host;
    }
    location / {
      set $upstream "http://swh-web:5004";
      proxy_pass $upstream;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Host $http_host;
      proxy_redirect off;
    }
    location /keycloak {
      set $upstream "http://keycloak:8080";
      proxy_pass $upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Server $host;
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
    location /kafka {
      set $upstream "http://kafka:8082";
      rewrite ^/kafka/(.*)$ /$1 break;
      proxy_pass $upstream;
    }
    location /mailhog {
      set $upstream "http://mailhog:8025";
      proxy_pass $upstream;
      proxy_set_header Host $host;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      rewrite ^/mailhog/(.*)$ /$1 break;
    }
  }
}
