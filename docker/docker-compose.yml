version: "2.1"

services:
  amqp:
    image: rabbitmq:3.6-management
    ports:
      - 5072:5672

  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    environment:
        ZOO_LOG4J_PROP: WARN,CONSOLE

  kafka:
    image: wurstmeister/kafka
    ports:
      - "5092:5092"
    env_file: ./env/kafka.env
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/kafka

  cmak:
    # Note: CMAK does not work out of the box, you need to run this first:
    # $ docker-compose exec zookeeper ./bin/zkCli.sh
    #   create /kafka-manager/mutex ""
    #   create /kafka-manager/mutex/locks ""
    #   create /kafka-manager/mutex/leases ""
    # See: https://github.com/yahoo/CMAK/issues/731#issuecomment-643880544

    image: hlebalbau/kafka-manager:stable
    environment:
      ZK_HOSTS: "zookeeper:2181"

  prometheus:
    image: prom/prometheus
    depends_on:
      - prometheus-statsd-exporter
    command:
      # Needed for the reverse-proxy
      - "--web.external-url=/prometheus"
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - "./conf/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
    restart: unless-stopped

  prometheus-statsd-exporter:
    image: prom/statsd-exporter
    command:
      - "--statsd.mapping-config=/etc/prometheus/statsd-mapping.yml"
    volumes:
      - "./conf/prometheus-statsd-mapping.yml:/etc/prometheus/statsd-mapping.yml:ro"
    restart: unless-stopped

  prometheus-rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter
    restart: unless-stopped
    environment:
      SKIP_QUEUES: "RPC_.*"
      MAX_QUEUES: 5000
      RABBIT_URL: http://amqp:15672
      LOG_LEVEL: warning

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SERVER_ROOT_URL: http://localhost:5080/grafana
    volumes:
      - "./conf/grafana/provisioning:/etc/grafana/provisioning:ro"
      - "./conf/grafana/dashboards:/var/lib/grafana/dashboards"

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  memcache:
    image: memcached
    restart: unless-stopped

  redis:
    image: redis
    volumes:
      - redis-data:/data
    ports:
      - 6379
    command:
      - "--save"
      - "60"
      - "1" # flush every minutes
    healthcheck:
      test: [ "CMD", "redis-cli", "PING" ]
      interval: 1s
      timeout: 5s
      retries: 10


  nginx:
    image: nginx
    volumes:
      - "./conf/nginx.conf:/etc/nginx/nginx.conf:ro"
    ports:
      - 5080:5080

  # Scheduler

  swh-scheduler-db:
    image: postgres:16
    environment:
      POSTGRES_DB: swh-scheduler
      POSTGRES_PASSWORD: testpassword
    volumes:
      - "./services/initdb.d:/docker-entrypoint-initdb.d"

  swh-scheduler:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-scheduler
      SWH_CONFIG_FILENAME: /scheduler.yml
      SWH_SCHEDULER_CONFIG_FILE: /scheduler.yml
      RPC_PORT: 5008
    entrypoint: /entrypoint.sh
    command: rpc
    depends_on:
      - swh-scheduler-db
    ports:
      - 5008:5008
    volumes:
      - "./conf/scheduler.yml:/scheduler.yml:ro"
      - "./services/swh-scheduler/entrypoint.sh:/entrypoint.sh:ro"

  swh-scheduler-listener:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-scheduler
      SWH_CONFIG_FILENAME: /scheduler.yml
      SWH_SCHEDULER_CONFIG_FILE: /scheduler.yml
      SWH_WORKER_INSTANCE: scheduler
      BROKER_URL: amqp://amqp/
      APP: swh.scheduler.celery_backend.config.app
    entrypoint: /entrypoint.sh
    command: worker start-listener
    depends_on:
      - swh-scheduler
      - amqp
    volumes:
      - "./conf/scheduler.yml:/scheduler.yml:ro"
      - "./services/swh-scheduler/entrypoint.sh:/entrypoint.sh:ro"

  swh-scheduler-runner:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-scheduler
      SWH_CONFIG_FILENAME: /scheduler.yml
      SWH_SCHEDULER_CONFIG_FILE: /scheduler.yml
      SWH_WORKER_INSTANCE: scheduler
      BROKER_URL: amqp://amqp/
      APP: swh.scheduler.celery_backend.config.app
    entrypoint: /entrypoint.sh
    command: worker start-runner --period 10
    depends_on:
      - swh-scheduler
      - amqp
    volumes:
      - "./conf/scheduler.yml:/scheduler.yml:ro"
      - "./services/swh-scheduler/entrypoint.sh:/entrypoint.sh:ro"

  swh-scheduler-runner-priority:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-scheduler
      SWH_CONFIG_FILENAME: /scheduler.yml
      SWH_SCHEDULER_CONFIG_FILE: /scheduler.yml
      SWH_WORKER_INSTANCE: scheduler
      BROKER_URL: amqp://amqp/
      APP: swh.scheduler.celery_backend.config.app
    entrypoint: /entrypoint.sh
    command: worker start-runner --period 10 --with-priority
    depends_on:
      - swh-scheduler
      - amqp
    volumes:
      - "./conf/scheduler.yml:/scheduler.yml:ro"
      - "./services/swh-scheduler/entrypoint.sh:/entrypoint.sh:ro"

  swh-scheduler-schedule-recurrent:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-scheduler
      SWH_CONFIG_FILENAME: /scheduler.yml
      SWH_SCHEDULER_CONFIG_FILE: /scheduler.yml
      SWH_WORKER_INSTANCE: scheduler
      BROKER_URL: amqp://amqp/
      APP: swh.scheduler.celery_backend.config.app
    entrypoint: /entrypoint.sh
    command: worker schedule-recurrent
    depends_on:
      - swh-scheduler
      - swh-loader
      - amqp
    volumes:
      - "./conf/scheduler.yml:/scheduler.yml:ro"
      - "./services/swh-scheduler/entrypoint.sh:/entrypoint.sh:ro"

  swh-scheduler-update-metrics:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-scheduler
      SWH_CONFIG_FILENAME: /scheduler.yml
      SWH_SCHEDULER_CONFIG_FILE: /scheduler.yml
    entrypoint: /entrypoint.sh
    command: update-metrics
    depends_on:
      - swh-scheduler-db
    volumes:
      - "./conf/scheduler.yml:/scheduler.yml:ro"
      - "./services/swh-scheduler/entrypoint.sh:/entrypoint.sh:ro"

  # Graph storage

  swh-storage-db:
    image: postgres:16
    environment:
      POSTGRES_DB: swh-storage
      POSTGRES_PASSWORD: testpassword
    volumes:
      - "./services/initdb.d:/docker-entrypoint-initdb.d"
      - storage-data:/var/lib/postgresql

  swh-storage:
    image: swh/stack
    build: ./
    ports:
      - 5002:5002
    depends_on:
      - swh-storage-db
      - swh-objstorage
      - kafka
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-storage
      SWH_CONFIG_FILENAME: /storage.yml
      RPC_PORT: 5002
    entrypoint: /entrypoint.sh
    command: rpc
    volumes:
      - "./conf/storage.yml:/storage.yml:ro"
      - "./services/swh-storage/entrypoint.sh:/entrypoint.sh:ro"

  # Object storage

  swh-objstorage:
    build: ./
    image: swh/stack
    ports:
      - 5003:5003
    env_file:
      - ./env/common_python.env
    environment:
      SWH_CONFIG_FILENAME: /objstorage.yml
      RPC_PORT: 5003
    entrypoint: /entrypoint.sh
    command: rpc
    volumes:
      - "./conf/objstorage.yml:/objstorage.yml:ro"
      - "./services/swh-objstorage/entrypoint.sh:/entrypoint.sh:ro"
      - objstorage-data:/srv/softwareheritage/objects

  # Indexer storage

  swh-idx-storage-db:
    image: postgres:16
    environment:
      POSTGRES_DB: swh-idx-storage
      POSTGRES_PASSWORD: testpassword
    volumes:
      - "./services/initdb.d:/docker-entrypoint-initdb.d"

  swh-idx-storage:
    image: swh/stack
    build: ./
    ports:
      - 5007:5007
    depends_on:
      - swh-idx-storage-db
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-idx-storage
      SWH_CONFIG_FILENAME: /indexer_storage.yml
      RPC_PORT: 5007
    entrypoint: /entrypoint.sh
    command: rpc
    volumes:
      - "./conf/indexer_storage.yml:/indexer_storage.yml:ro"
      - "./services/swh-indexer/entrypoint.sh:/entrypoint.sh:ro"

  # Web interface
  swh-web-db:
    image: postgres:16
    environment:
      POSTGRES_DB: swh-web
      POSTGRES_PASSWORD: testpassword
    volumes:
      - "./services/initdb.d:/docker-entrypoint-initdb.d"

  swh-web:
    build: ./
    image: swh/stack
    ports:
      - 3000:3000
      - 5004:5004
    depends_on:
      - swh-idx-storage
      - swh-scheduler
      - swh-storage
      - swh-web-db
      - swh-search
      - memcache
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-web
      VERBOSITY: 3
      DJANGO_SETTINGS_MODULE: swh.web.settings.production
      SWH_CONFIG_FILENAME: /web.yml
    entrypoint: /entrypoint.sh
    volumes:
      - "./conf/web.yml:/web.yml:ro"
      - "./services/swh-web/entrypoint.sh:/entrypoint.sh:ro"

  swh-web-cron:
    build: ./
    image: swh/stack
    depends_on:
      - swh-web
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-web
      VERBOSITY: 2
      DJANGO_SETTINGS_MODULE: swh.web.settings.production
      SWH_CONFIG_FILENAME: /web.yml
    entrypoint: /entrypoint.sh
    command: cron
    volumes:
      - "./conf/web.yml:/web.yml:ro"
      - "./services/swh-web/entrypoint.sh:/entrypoint.sh:ro"

  swh-deposit-db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: swh-deposit
    volumes:
      - "./services/initdb.d:/docker-entrypoint-initdb.d"

  swh-deposit:
    image: swh/stack
    build: ./
    ports:
      - 5006:5006
    depends_on:
      - swh-scheduler
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-deposit
      VERBOSITY: 3
      SWH_CONFIG_FILENAME: /deposit.yml
      DJANGO_SETTINGS_MODULE: swh.deposit.settings.production
      RPC_PORT: 5006
    entrypoint: /entrypoint.sh
    volumes:
      - "./conf/deposit.yml:/deposit.yml:ro"
      - "./services/swh-deposit/entrypoint.sh:/entrypoint.sh:ro"

  swh-vault-db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: swh-vault
    volumes:
      - "./services/initdb.d:/docker-entrypoint-initdb.d"

  swh-vault:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-vault
      SWH_CONFIG_FILENAME: /vault.yml
      RPC_PORT: 5005
    entrypoint: /entrypoint.sh
    command: rpc
    ports:
      - 5005:5005
    depends_on:
      - swh-vault-db
      - swh-objstorage
      - swh-storage
      - swh-scheduler
    volumes:
      - "./conf/vault.yml:/vault.yml:ro"
      - "./services/swh-vault/entrypoint.sh:/entrypoint.sh:ro"

  swh-vault-worker:
    image: swh/stack
    build: ./
    entrypoint: /entrypoint.sh
    command: worker
    env_file:
      - ./env/common_python.env
      - ./env/workers.env
    environment:
      SWH_CONFIG_FILENAME: /cooker.yml
    depends_on:
      - swh-vault
      - swh-storage
    volumes:
      - "./conf/vault-worker.yml:/cooker.yml:ro"
      - "./services/swh-vault/entrypoint.sh:/entrypoint.sh:ro"

  # Lister Celery workers

  swh-lister:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
      - ./env/listers.env
      - ./env/workers.env
    user: swh
    environment:
      SWH_WORKER_INSTANCE: listers
      SWH_CONFIG_FILENAME: /lister.yml
    depends_on:
      - swh-scheduler
      - swh-scheduler-runner
      - amqp
      - swh-lister-maven-nginx
    entrypoint: /entrypoint.sh
    command: worker
    volumes:
      - "./conf/lister.yml:/lister.yml:ro"
      - "./services/swh-worker/entrypoint.sh:/entrypoint.sh:ro"


  swh-lister-maven-nginx:
    # Http server to host the maven extracted index for the maven lister
    image: nginx
    volumes:
      - "./conf/maven_index/:/usr/share/nginx/html:ro"
    ports:
      - 8880:80

  # Loader + deposit checker Celery workers

  swh-loader:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
      - ./env/workers.env
    user: swh
    environment:
      SWH_WORKER_INSTANCE: loader
      SWH_CONFIG_FILENAME: /loader.yml
    entrypoint: /entrypoint.sh
    command: worker
    depends_on:
      - swh-storage
      - swh-scheduler
      - amqp
    volumes:
      - "./conf/loader.yml:/loader.yml:ro"
      - "./services/swh-worker/entrypoint.sh:/entrypoint.sh:ro"

  swh-loader-deposit:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
      - ./env/workers.env
    user: swh
    environment:
      SWH_WORKER_INSTANCE: loader-deposit
      SWH_CONFIG_FILENAME: /loader-deposit.yml
    entrypoint: /entrypoint.sh
    command: worker
    depends_on:
      - swh-storage
      - swh-scheduler
      - swh-deposit
      - amqp
    volumes:
      - "./conf/loader-deposit.yml:/loader-deposit.yml:ro"
      - "./services/swh-worker/entrypoint.sh:/entrypoint.sh:ro"

  # Indexer workers

  swh-indexer-worker-celery:
    image: swh/stack
    build: ./
    user: swh
    env_file:
      - ./env/common_python.env
      - ./env/workers.env
    environment:
      SWH_WORKER_INSTANCE: indexer
      SWH_CONFIG_FILENAME: /indexer.yml
      CONCURRENCY: 4
      POSTGRES_DB: swh-idx-storage
    entrypoint: /entrypoint.sh
    command: worker
    depends_on:
      - swh-scheduler-runner
      - swh-idx-storage
      - swh-storage
      - swh-objstorage
      - amqp
    volumes:
      - "./conf/indexer.yml:/indexer.yml:ro"
      - "./services/swh-indexer/entrypoint.sh:/entrypoint.sh:ro"

  swh-indexer-worker-journal:
    image: swh/stack
    build: ./
    user: swh
    env_file:
      - ./env/common_python.env
      - ./env/workers.env
    environment:
      SWH_WORKER_INSTANCE: indexer
      SWH_CONFIG_FILENAME: /indexer.yml
      CONCURRENCY: 4
      POSTGRES_DB: swh-idx-storage
    entrypoint: /entrypoint.sh
    command: journal-client
    depends_on:
      - kafka
      - swh-storage
      - swh-idx-storage
      - swh-objstorage
    volumes:
      - "./conf/indexer.yml:/indexer.yml:ro"
      - "./services/swh-indexer/entrypoint.sh:/entrypoint.sh:ro"

  # Journal related

  swh-scheduler-journal-client:
    image: swh/stack
    build: ./
    entrypoint: /entrypoint.sh
    command: journal-client
    environment:
      SWH_CONFIG_FILENAME: /scheduler.yml
    env_file:
      - ./env/common_python.env
    depends_on:
      - kafka
      - swh-scheduler
    volumes:
      - "./conf/scheduler_journal_client.yml:/scheduler.yml:ro"
      - "./services/swh-scheduler/entrypoint.sh:/entrypoint.sh:ro"

  swh-counters:
    image: swh/stack
    build: ./
    entrypoint: /entrypoint.sh
    command: rpc
    environment:
      SWH_CONFIG_FILENAME: /counters.yml
      RPC_PORT: 5011
    env_file:
      - ./env/common_python.env
    ports:
      - 5011:5011
    depends_on:
      - redis
    volumes:
      - "./conf/counters.yml:/counters.yml:ro"
      - "./services/swh-counters/entrypoint.sh:/entrypoint.sh:ro"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5011/" ]
      interval: 10s
      timeout: 5s
      retries: 10

  swh-counters-journal-client:
    image: swh/stack
    build: ./
    entrypoint: /entrypoint.sh
    command: journal-client
    environment:
      SWH_CONFIG_FILENAME: /counters_journal_client.yml
    env_file:
      - ./env/common_python.env
    depends_on:
      - kafka
      - redis
      - swh-counters
    volumes:
      - "./conf/counters_journal_client.yml:/counters_journal_client.yml:ro"
      - "./services/swh-counters/entrypoint.sh:/entrypoint.sh:ro"

  # Search related

  swh-search:
    image: swh/stack
    build: ./
    entrypoint: /entrypoint.sh
    command: rpc
    ports:
      - 5010:5010
    environment:
      SWH_CONFIG_FILENAME: /search.yml
      RPC_PORT: 5010
    env_file:
      - ./env/common_python.env
    volumes:
      - "./conf/search-memory.yml:/search.yml:ro"
      - "./services/swh-search/entrypoint.sh:/entrypoint.sh:ro"

  swh-search-journal-client-objects:
    image: swh/stack
    build: ./
    entrypoint: /entrypoint.sh
    environment:
      SWH_CONFIG_FILENAME: /search_journal_client.yml
    command: journal-client
    depends_on:
      - kafka
      - swh-search
    volumes:
      - "./conf/search_journal_client_objects.yml:/search_journal_client.yml:ro"
      - "./services/swh-search/entrypoint.sh:/entrypoint.sh:ro"

  swh-search-journal-client-indexed:
    image: swh/stack
    build: ./
    entrypoint: /entrypoint.sh
    command: journal-client
    environment:
      SWH_CONFIG_FILENAME: /search_journal_client.yml
    depends_on:
      - kafka
      - swh-search
    volumes:
      - "./conf/search_journal_client_indexed.yml:/search_journal_client.yml:ro"
      - "./services/swh-search/entrypoint.sh:/entrypoint.sh:ro"

  # GraphQL API

  swh-graphql:
    image: swh/stack
    build: ./
    depends_on:
      - swh-storage
    ports:
      - 5013:5013
    environment:
      SWH_CONFIG_FILENAME: /graphql.yml
      RPC_PORT: 5013
    env_file:
      - ./env/common_python.env
    volumes:
      - "./conf/graphql.yml:/graphql.yml:ro"
      - "./services/swh-graphql/entrypoint.sh:/entrypoint.sh:ro"
    entrypoint: /entrypoint.sh
    command: rpc

volumes:
  redis-data:
  storage-data:
  objstorage-data:
  kafka-data:
