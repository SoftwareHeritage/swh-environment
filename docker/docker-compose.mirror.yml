version: "3.8"

services:
  # first, add a bit of startup initialization and sanity check
  kafka:
    environment:
      # we need these to be defined beforehand so the replayer can actually
      # subscribe to topics (even if the producer has not started)
      KAFKA_CREATE_TOPICS: swh.journal.objects.content:16:1:compact,
        swh.journal.objects.directory:16:1:compact,
        swh.journal.objects.extid:16:1:compact,
        swh.journal.objects.origin:16:1:compact,
        swh.journal.objects.origin_visit:16:1:compact,
        swh.journal.objects.origin_visit_status:16:1:compact,
        swh.journal.objects.raw_extrinsic_metadata:16:1:compact,
        swh.journal.objects.release:16:1:compact,
        swh.journal.objects_privileged.release:16:1:compact,
        swh.journal.objects.revision:16:1:compact,
        swh.journal.objects_privileged.revision:16:1:compact,
        swh.journal.objects.skipped_content:16:1:compact,
        swh.journal.objects.snapshot:16:1:compact,
        swh.journal.indexed.origin_intrinsic_metadata:16:1:compact
    healthcheck:
      test: "[ `JMX_PORT= kafka-topics.sh --list --zookeeper zookeeper:2181 | wc -l` -ge `echo $$KAFKA_CREATE_TOPICS | tr ',' '\n' | wc -l` ]"
      interval: 2s
      timeout: 10s
      retries: 20

  swh-storage:
    # we want to make sure kafka has started and topics have been created
    depends_on:
      kafka:
        condition: service_healthy
      swh-objstorage:
        condition: service_healthy
      swh-storage-db:
        condition: service_started

  nginx-mirror:
    image: nginx
    volumes:
      - "./conf/mirror/nginx.conf:/etc/nginx/nginx.conf:ro"
    ports:
      - 5081:80

  # create a dedicated db for the mirror
  swh-storage-mirror-db:
    image: postgres:16
    environment:
      POSTGRES_DB: swh-storage-mirror
      POSTGRES_PASSWORD: testpassword

  # and an RPC server
  swh-storage-mirror:
    image: swh/stack
    build: ./
    depends_on:
      - swh-storage-mirror-db
      - swh-objstorage-mirror
      - prometheus-statsd-exporter
    env_file:
      - ./env/common_python.env
    environment:
      DB_FLAVOR: mirror
      POSTGRES_DB: swh-storage-mirror
      STORAGE_BACKEND: postgresql
      SWH_CONFIG_FILENAME: /storage.yml
      RPC_PORT: 5002
    entrypoint: /entrypoint.sh
    command: rpc
    healthcheck:
      test: curl -f http://localhost:5002 || exit 1
    volumes:
      - "./conf/mirror/storage.yml:/storage.yml:ro"
      - "./services/swh-storage/entrypoint.sh:/entrypoint.sh:ro"

  # Object storage
  swh-objstorage-mirror:
    build: ./
    image: swh/stack
    env_file:
      - ./env/common_python.env
    depends_on:
      - prometheus-statsd-exporter
    environment:
      SWH_CONFIG_FILENAME: /objstorage.yml
      RPC_PORT: 5003
    entrypoint: /entrypoint.sh
    command: rpc
    healthcheck:
      test: curl -f http://localhost:5003 || exit 1
    volumes:
      - "./conf/objstorage.yml:/objstorage.yml:ro"
      - "./services/swh-objstorage/entrypoint.sh:/entrypoint.sh:ro"
      - /srv/softwareheritage/objects

  # a dedicated swh-web db
  swh-web-mirror-db:
    image: postgres:16
    environment:
      POSTGRES_DB: swh-web-mirror
      POSTGRES_PASSWORD: testpassword
    volumes:
      - "./services/initdb.d:/docker-entrypoint-initdb.d"

  # a dedicated swh-web
  swh-web-mirror:
    build: ./
    image: swh/stack
    depends_on:
      - swh-storage-mirror
      - swh-web-mirror-db
      - prometheus-statsd-exporter
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-web-mirror
      VERBOSITY: 3
      DJANGO_SETTINGS_MODULE: swh.web.settings.production
      SWH_CONFIG_FILENAME: /web.yml
    entrypoint: /entrypoint.sh
    healthcheck:
      test: curl -f http://localhost:5004 || exit 1
    volumes:
      - "./conf/mirror/web.yml:/web.yml:ro"
      - "./services/swh-web/entrypoint.sh:/entrypoint.sh:ro"
      - "./assets/mirror/:/mirror/:ro"

  # and the background processes that keeps the mirror in sync with the
  # main graph
  swh-storage-mirror-replayer:
    image: swh/stack
    build: ./
    depends_on:
      kafka:  # needed to make sure topics exists so we can subscribe
        condition: service_healthy
      swh-storage-mirror-db:
        condition: service_started
      prometheus-statsd-exporter:
        condition: service_started
    env_file:
      - ./env/common_python.env
    environment:
      SWH_CONFIG_FILENAME: /replayer.yml
      LOG_LEVEL: DEBUG
    entrypoint: /entrypoint.sh
    command: replayer
    volumes:
      - "./conf/mirror/replayer.yml:/replayer.yml:ro"
      - "./services/swh-storage/entrypoint.sh:/entrypoint.sh:ro"

  swh-objstorage-mirror-replayer:
    image: swh/stack
    build: ./
    depends_on:
      kafka:  # needed to make sure topics exists so we can subscribe
        condition: service_healthy
      prometheus-statsd-exporter:
        condition: service_started
      swh-objstorage:
        condition: service_healthy
      swh-objstorage-mirror:
        condition: service_healthy

    env_file:
      - ./env/common_python.env
    environment:
      SWH_CONFIG_FILENAME: /content-replayer.yml
      LOG_LEVEL: DEBUG
    entrypoint: /entrypoint.sh
    command: replayer
    volumes:
      - "./conf/mirror/content-replayer.yml:/content-replayer.yml:ro"
      - "./services/swh-objstorage/entrypoint.sh:/entrypoint.sh:ro"

  # and a vault full-stack
  swh-vault-mirror-db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: swh-vault-mirror
    volumes:
      - "./services/initdb.d:/docker-entrypoint-initdb.d"

  swh-vault-mirror:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-vault-mirror
      SWH_CONFIG_FILENAME: /vault.yml
      RPC_PORT: 5005
    entrypoint: /entrypoint.sh
    command: rpc
    healthcheck:
      test: curl -f http://localhost:5005 || exit 1
    depends_on:
      - swh-vault-mirror-db
      - swh-objstorage
      - swh-storage-mirror
      - swh-scheduler-mirror
      - prometheus-statsd-exporter
    volumes:
      - "./conf/mirror/vault.yml:/vault.yml:ro"
      - "./services/swh-vault/entrypoint.sh:/entrypoint.sh:ro"

  swh-vault-mirror-worker:
    image: swh/stack
    build: ./
    entrypoint: /entrypoint.sh
    command: worker
    env_file:
      - ./env/common_python.env
      - ./env/workers.env
    environment:
      SWH_CONFIG_FILENAME: /cooker.yml
    depends_on:
      - swh-vault-mirror
      - swh-storage-mirror
      - prometheus-statsd-exporter
    volumes:
      - "./conf/mirror/vault-worker.yml:/cooker.yml:ro"
      - "./services/swh-vault/entrypoint.sh:/entrypoint.sh:ro"

  swh-scheduler-mirror-db:
    image: postgres:16
    environment:
      POSTGRES_DB: swh-scheduler-mirror
      POSTGRES_PASSWORD: testpassword
    volumes:
      - "./services/initdb.d:/docker-entrypoint-initdb.d"

  swh-scheduler-mirror:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-scheduler-mirror
      SWH_CONFIG_FILENAME: /scheduler.yml
      SWH_SCHEDULER_CONFIG_FILE: /scheduler.yml
      RPC_PORT: 5008
      BROKER_URL: amqp://amqp-mirror/
    entrypoint: /entrypoint.sh
    command: rpc
    healthcheck:
      test: curl -f http://localhost:5008 || exit 1
    depends_on:
      - swh-scheduler-mirror-db
      - prometheus-statsd-exporter
    volumes:
      - "./conf/mirror/scheduler.yml:/scheduler.yml:ro"
      - "./services/swh-scheduler/entrypoint.sh:/entrypoint.sh:ro"

  swh-scheduler-mirror-listener:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-scheduler-mirror
      SWH_CONFIG_FILENAME: /scheduler.yml
      SWH_SCHEDULER_CONFIG_FILE: /scheduler.yml
      SWH_WORKER_INSTANCE: scheduler
      BROKER_URL: amqp://amqp-mirror/
      APP: swh.scheduler.celery_backend.config.app
    entrypoint: /entrypoint.sh
    command: worker start-listener
    depends_on:
      - swh-scheduler-mirror
      - amqp-mirror
      - prometheus-statsd-exporter
    volumes:
      - "./conf/mirror/scheduler.yml:/scheduler.yml:ro"
      - "./services/swh-scheduler/entrypoint.sh:/entrypoint.sh:ro"

  swh-scheduler-mirror-runner:
    image: swh/stack
    build: ./
    env_file:
      - ./env/common_python.env
    environment:
      POSTGRES_DB: swh-scheduler-mirror
      SWH_CONFIG_FILENAME: /scheduler.yml
      SWH_SCHEDULER_CONFIG_FILE: /scheduler.yml
      SWH_WORKER_INSTANCE: scheduler
      APP: swh.scheduler.celery_backend.config.app
    entrypoint: /entrypoint.sh
    command: worker start-runner --period 10
    depends_on:
      - swh-scheduler-mirror
      - amqp-mirror
      - prometheus-statsd-exporter
    volumes:
      - "./conf/mirror/scheduler.yml:/scheduler.yml:ro"
      - "./services/swh-scheduler/entrypoint.sh:/entrypoint.sh:ro"

  amqp-mirror:
    image: rabbitmq:3.6-management
